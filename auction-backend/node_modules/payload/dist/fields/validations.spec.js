"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const validations_1 = require("./validations");
const minLengthMessage = (length) => `This value must be longer than the minimum length of ${length} characters.`;
const maxLengthMessage = (length) => `This value must be shorter than the max length of ${length} characters.`;
const minValueMessage = (value, min) => `"${value}" is less than the min allowed value of ${min}.`;
const maxValueMessage = (value, max) => `"${value}" is greater than the max allowed value of ${max}.`;
const requiredMessage = 'This field is required.';
const validNumberMessage = 'Please enter a valid number.';
let options = {
    operation: 'create',
    data: undefined,
    siblingData: undefined,
};
describe('Field Validations', () => {
    describe('text', () => {
        it('should validate', () => {
            const val = 'test';
            const result = (0, validations_1.text)(val, options);
            expect(result).toBe(true);
        });
        it('should show required message', () => {
            const val = undefined;
            const result = (0, validations_1.text)(val, { ...options, required: true });
            expect(result).toBe(requiredMessage);
        });
        it('should handle undefined', () => {
            const val = undefined;
            const result = (0, validations_1.text)(val, options);
            expect(result).toBe(true);
        });
        it('should validate maxLength', () => {
            const val = 'toolong';
            const result = (0, validations_1.text)(val, { ...options, maxLength: 5 });
            expect(result).toBe(maxLengthMessage(5));
        });
        it('should validate minLength', () => {
            const val = 'short';
            const result = (0, validations_1.text)(val, { ...options, minLength: 10 });
            expect(result).toBe(minLengthMessage(10));
        });
        it('should validate maxLength with no value', () => {
            const val = undefined;
            const result = (0, validations_1.text)(val, { ...options, maxLength: 5 });
            expect(result).toBe(true);
        });
        it('should validate minLength with no value', () => {
            const val = undefined;
            const result = (0, validations_1.text)(val, { ...options, minLength: 10 });
            expect(result).toBe(true);
        });
    });
    describe('textarea', () => {
        options = { ...options, field: { type: 'textarea', name: 'test' } };
        it('should validate', () => {
            const val = 'test';
            const result = (0, validations_1.textarea)(val, options);
            expect(result).toBe(true);
        });
        it('should show required message', () => {
            const val = undefined;
            const result = (0, validations_1.textarea)(val, { ...options, required: true });
            expect(result).toBe(requiredMessage);
        });
        it('should handle undefined', () => {
            const val = undefined;
            const result = (0, validations_1.textarea)(val, options);
            expect(result).toBe(true);
        });
        it('should validate maxLength', () => {
            const val = 'toolong';
            const result = (0, validations_1.textarea)(val, { ...options, maxLength: 5 });
            expect(result).toBe(maxLengthMessage(5));
        });
        it('should validate minLength', () => {
            const val = 'short';
            const result = (0, validations_1.textarea)(val, { ...options, minLength: 10 });
            expect(result).toBe(minLengthMessage(10));
        });
        it('should validate maxLength with no value', () => {
            const val = undefined;
            const result = (0, validations_1.textarea)(val, { ...options, maxLength: 5 });
            expect(result).toBe(true);
        });
        it('should validate minLength with no value', () => {
            const val = undefined;
            const result = (0, validations_1.textarea)(val, { ...options, minLength: 10 });
            expect(result).toBe(true);
        });
    });
    describe('password', () => {
        options.type = 'password';
        options.name = 'test';
        it('should validate', () => {
            const val = 'test';
            const result = (0, validations_1.password)(val, options);
            expect(result).toBe(true);
        });
        it('should show required message', () => {
            const val = undefined;
            const result = (0, validations_1.password)(val, { ...options, required: true });
            expect(result).toBe(requiredMessage);
        });
        it('should handle undefined', () => {
            const val = undefined;
            const result = (0, validations_1.password)(val, options);
            expect(result).toBe(true);
        });
        it('should validate maxLength', () => {
            const val = 'toolong';
            const result = (0, validations_1.password)(val, { ...options, maxLength: 5 });
            expect(result).toBe(maxLengthMessage(5));
        });
        it('should validate minLength', () => {
            const val = 'short';
            const result = (0, validations_1.password)(val, { ...options, minLength: 10 });
            expect(result).toBe(minLengthMessage(10));
        });
        it('should validate maxLength with no value', () => {
            const val = undefined;
            const result = (0, validations_1.password)(val, { ...options, maxLength: 5 });
            expect(result).toBe(true);
        });
        it('should validate minLength with no value', () => {
            const val = undefined;
            const result = (0, validations_1.password)(val, { ...options, minLength: 10 });
            expect(result).toBe(true);
        });
    });
    describe('point', () => {
        options.type = 'point';
        options.name = 'point';
        it('should validate numbers', () => {
            const val = ['0.1', '0.2'];
            const result = (0, validations_1.point)(val, options);
            expect(result).toBe(true);
        });
        it('should validate strings that could be numbers', () => {
            const val = ['0.1', '0.2'];
            const result = (0, validations_1.point)(val, options);
            expect(result).toBe(true);
        });
        it('should show required message when undefined', () => {
            const val = undefined;
            const result = (0, validations_1.point)(val, { ...options, required: true });
            expect(result).not.toBe(true);
        });
        it('should show required message when array', () => {
            const val = [];
            const result = (0, validations_1.point)(val, { ...options, required: true });
            expect(result).not.toBe(true);
        });
        it('should show required message when array of undefined', () => {
            const val = [undefined, undefined];
            const result = (0, validations_1.point)(val, { ...options, required: true });
            expect(result).not.toBe(true);
        });
        it('should handle undefined not required', () => {
            const val = undefined;
            const result = (0, validations_1.password)(val, options);
            expect(result).toBe(true);
        });
        it('should handle empty array not required', () => {
            const val = [];
            const result = (0, validations_1.point)(val, options);
            expect(result).toBe(true);
        });
        it('should handle array of undefined not required', () => {
            const val = [undefined, undefined];
            const result = (0, validations_1.point)(val, options);
            expect(result).toBe(true);
        });
        it('should prevent text input', () => {
            const val = ['bad', 'input'];
            const result = (0, validations_1.point)(val, options);
            expect(result).not.toBe(true);
        });
        it('should prevent missing value', () => {
            const val = [0.1];
            const result = (0, validations_1.point)(val, options);
            expect(result).not.toBe(true);
        });
    });
    describe('select', () => {
        options.type = 'select';
        options.options = ['one', 'two', 'three'];
        const optionsRequired = {
            ...options,
            required: true,
            options: [{
                    value: 'one',
                    label: 'One',
                }, {
                    value: 'two',
                    label: 'two',
                }, {
                    value: 'three',
                    label: 'three',
                }],
        };
        const optionsWithEmptyString = {
            ...options,
            options: [{
                    value: '',
                    label: 'None',
                }, {
                    value: 'option',
                    label: 'Option',
                }],
        };
        it('should allow valid input', () => {
            const val = 'one';
            const result = (0, validations_1.select)(val, options);
            expect(result).toStrictEqual(true);
        });
        it('should prevent invalid input', () => {
            const val = 'bad';
            const result = (0, validations_1.select)(val, options);
            expect(result).not.toStrictEqual(true);
        });
        it('should allow null input', () => {
            const val = null;
            const result = (0, validations_1.select)(val, options);
            expect(result).toStrictEqual(true);
        });
        it('should allow undefined input', () => {
            let val;
            const result = (0, validations_1.select)(val, options);
            expect(result).toStrictEqual(true);
        });
        it('should prevent empty string input', () => {
            const val = '';
            const result = (0, validations_1.select)(val, options);
            expect(result).not.toStrictEqual(true);
        });
        it('should prevent undefined input with required', () => {
            let val;
            const result = (0, validations_1.select)(val, optionsRequired);
            expect(result).not.toStrictEqual(true);
        });
        it('should prevent empty string input with required', () => {
            const result = (0, validations_1.select)('', optionsRequired);
            expect(result).not.toStrictEqual(true);
        });
        it('should prevent undefined input with required and hasMany', () => {
            let val;
            options.hasMany = true;
            const result = (0, validations_1.select)(val, optionsRequired);
            expect(result).not.toStrictEqual(true);
        });
        it('should prevent empty array input with required and hasMany', () => {
            optionsRequired.hasMany = true;
            const result = (0, validations_1.select)([], optionsRequired);
            expect(result).not.toStrictEqual(true);
        });
        it('should prevent empty string array input with required and hasMany', () => {
            options.hasMany = true;
            const result = (0, validations_1.select)([''], optionsRequired);
            expect(result).not.toStrictEqual(true);
        });
        it('should prevent null input with required and hasMany', () => {
            const val = null;
            options.hasMany = true;
            const result = (0, validations_1.select)(val, optionsRequired);
            expect(result).not.toStrictEqual(true);
        });
        it('should allow valid input with option objects', () => {
            const val = 'one';
            options.hasMany = false;
            const result = (0, validations_1.select)(val, optionsRequired);
            expect(result).toStrictEqual(true);
        });
        it('should prevent invalid input with option objects', () => {
            const val = 'bad';
            options.hasMany = false;
            const result = (0, validations_1.select)(val, optionsRequired);
            expect(result).not.toStrictEqual(true);
        });
        it('should allow empty string input with option object', () => {
            const val = '';
            const result = (0, validations_1.select)(val, optionsWithEmptyString);
            expect(result).toStrictEqual(true);
        });
        it('should allow empty string input with option object and required', () => {
            const val = '';
            optionsWithEmptyString.required = true;
            const result = (0, validations_1.select)(val, optionsWithEmptyString);
            expect(result).toStrictEqual(true);
        });
        it('should allow valid input with hasMany', () => {
            const val = ['one', 'two'];
            const result = (0, validations_1.select)(val, options);
            expect(result).toStrictEqual(true);
        });
        it('should prevent invalid input with hasMany', () => {
            const val = ['one', 'bad'];
            const result = (0, validations_1.select)(val, options);
            expect(result).not.toStrictEqual(true);
        });
        it('should allow valid input with hasMany option objects', () => {
            const val = ['one', 'three'];
            optionsRequired.hasMany = true;
            const result = (0, validations_1.select)(val, optionsRequired);
            expect(result).toStrictEqual(true);
        });
        it('should prevent invalid input with hasMany option objects', () => {
            const val = ['three', 'bad'];
            optionsRequired.hasMany = true;
            const result = (0, validations_1.select)(val, optionsRequired);
            expect(result).not.toStrictEqual(true);
        });
    });
    describe('number', () => {
        options.type = 'number';
        options.name = 'test';
        it('should validate', () => {
            const val = 1;
            const result = (0, validations_1.number)(val, options);
            expect(result).toBe(true);
        });
        it('should validate 2', () => {
            const val = 1.5;
            const result = (0, validations_1.number)(val, options);
            expect(result).toBe(true);
        });
        it('should show invalid number message', () => {
            const val = 'test';
            const result = (0, validations_1.number)(val, { ...options });
            expect(result).toBe(validNumberMessage);
        });
        it('should handle empty value', () => {
            const val = '';
            const result = (0, validations_1.number)(val, { ...options });
            expect(result).toBe(true);
        });
        it('should handle required value', () => {
            const val = '';
            const result = (0, validations_1.number)(val, { ...options, required: true });
            expect(result).toBe(validNumberMessage);
        });
        it('should validate minValue', () => {
            const val = 2.4;
            const result = (0, validations_1.number)(val, { ...options, min: 2.5 });
            expect(result).toBe(minValueMessage(val, 2.5));
        });
        it('should validate maxValue', () => {
            const val = 1.25;
            const result = (0, validations_1.number)(val, { ...options, max: 1 });
            expect(result).toBe(maxValueMessage(val, 1));
        });
    });
});
//# sourceMappingURL=data:application/json;base64,